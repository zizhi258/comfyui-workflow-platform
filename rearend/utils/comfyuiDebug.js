const axios = require('axios');

/**
 * ComfyUIË∞ÉËØïÂ∑•ÂÖ∑
 */
class ComfyUIDebugger {
  constructor(comfyuiUrl = 'http://127.0.0.1:8188') {
    this.comfyuiUrl = comfyuiUrl;
  }

  /**
   * ËøêË°åÂÆåÊï¥ÁöÑComfyUIËØäÊñ≠
   */
  async runDiagnostics() {
    console.log('üîç ÂºÄÂßãComfyUIËØäÊñ≠...\n');
    
    const results = {
      connection: false,
      endpoints: {},
      models: false,
      suggestions: []
    };

    // 1. Âü∫Á°ÄËøûÊé•ÊµãËØï
    console.log('1Ô∏è‚É£ ÊµãËØïÂü∫Á°ÄËøûÊé•...');
    try {
      const response = await axios.get(this.comfyuiUrl, { timeout: 3000 });
      console.log('‚úÖ Âü∫Á°ÄËøûÊé•ÊàêÂäü');
      results.connection = true;
    } catch (error) {
      console.log('‚ùå Âü∫Á°ÄËøûÊé•Â§±Ë¥•:', error.message);
      if (error.code === 'ECONNREFUSED') {
        results.suggestions.push('ComfyUIÊúçÂä°Êú™ÂêØÂä®ÔºåËØ∑ËøêË°å: python main.py --listen 127.0.0.1 --port 8188');
      } else if (error.code === 'ENOTFOUND') {
        results.suggestions.push('Ê£ÄÊü•ComfyUIÊúçÂä°Âú∞ÂùÄÊòØÂê¶Ê≠£Á°Æ');
      }
    }

    // 2. ÂÖ≥ÈîÆÁ´ØÁÇπÊµãËØï
    console.log('\n2Ô∏è‚É£ ÊµãËØïÂÖ≥ÈîÆÁ´ØÁÇπ...');
    const endpoints = [
      '/system_stats',
      '/queue', 
      '/history',
      '/object_info'
    ];

    for (const endpoint of endpoints) {
      try {
        const response = await axios.get(`${this.comfyuiUrl}${endpoint}`, { timeout: 5000 });
        console.log(`‚úÖ ${endpoint}: HTTP ${response.status}`);
        results.endpoints[endpoint] = true;
      } catch (error) {
        console.log(`‚ùå ${endpoint}: ${error.message}`);
        results.endpoints[endpoint] = false;
      }
    }

    // 3. Ê®°Âûã‰ø°ÊÅØÊ£ÄÊü•
    console.log('\n3Ô∏è‚É£ Ê£ÄÊü•Ê®°Âûã‰ø°ÊÅØ...');
    try {
      const response = await axios.get(`${this.comfyuiUrl}/object_info`, { timeout: 10000 });
      if (response.data && response.data.CheckpointLoaderSimple) {
        const checkpoints = response.data.CheckpointLoaderSimple.input.required.ckpt_name[0];
        console.log('‚úÖ ÂèëÁé∞ÂèØÁî®Ê®°Âûã:', checkpoints.length, '‰∏™');
        console.log('üìã Ââç3‰∏™Ê®°Âûã:', checkpoints.slice(0, 3));
        results.models = true;
        
        if (checkpoints.length === 0) {
          results.suggestions.push('Ê≤°ÊúâÊâæÂà∞ÂèØÁî®ÁöÑÊ®°ÂûãÊñá‰ª∂ÔºåËØ∑Â∞Ü.safetensorsÊñá‰ª∂ÊîæÂú®ComfyUI/models/checkpoints/ÁõÆÂΩï‰∏ã');
        }
      } else {
        console.log('‚ùå Êó†Ê≥ïËé∑ÂèñÊ®°Âûã‰ø°ÊÅØ');
        results.suggestions.push('ComfyUIËäÇÁÇπ‰ø°ÊÅØ‰∏çÂÆåÊï¥ÔºåÂèØËÉΩÈúÄË¶ÅÈáçÂêØÊúçÂä°');
      }
    } catch (error) {
      console.log('‚ùå Ê®°Âûã‰ø°ÊÅØÊ£ÄÊü•Â§±Ë¥•:', error.message);
    }

    // 4. ÁÆÄÂçïÂ∑•‰ΩúÊµÅÊµãËØï
    console.log('\n4Ô∏è‚É£ ÊµãËØïÁÆÄÂçïÂ∑•‰ΩúÊµÅ...');
    try {
      const testWorkflow = this.createTestWorkflow();
      const response = await axios.post(`${this.comfyuiUrl}/prompt`, {
        client_id: 'debug-test',
        prompt: testWorkflow
      }, {
        timeout: 10000,
        headers: { 'Content-Type': 'application/json' },
        validateStatus: status => status < 500
      });

      if (response.status === 200) {
        console.log('‚úÖ Â∑•‰ΩúÊµÅÊèê‰∫§ÊàêÂäü');
        console.log('üìÑ ‰ªªÂä°ID:', response.data.prompt_id);
      } else {
        console.log('‚ùå Â∑•‰ΩúÊµÅÊèê‰∫§Â§±Ë¥•:', response.status);
        console.log('üí¨ ÈîôËØØËØ¶ÊÉÖ:', response.data);
        
        if (response.status === 400) {
          results.suggestions.push('Â∑•‰ΩúÊµÅÊ†ºÂºèÊúâËØØÔºåËØ∑Ê£ÄÊü•ËäÇÁÇπÂèÇÊï∞ÂíåËøûÊé•');
        }
      }
    } catch (error) {
      console.log('‚ùå Â∑•‰ΩúÊµÅÊµãËØïÂ§±Ë¥•:', error.message);
    }

    // 5. ËæìÂá∫ËØäÊñ≠ÁªìÊûú
    console.log('\nüìä ËØäÊñ≠ÁªìÊûúÊÄªÁªì:');
    console.log('ËøûÊé•Áä∂ÊÄÅ:', results.connection ? '‚úÖ Ê≠£Â∏∏' : '‚ùå Â§±Ë¥•');
    console.log('Ê®°ÂûãÂèØÁî®:', results.models ? '‚úÖ Ê≠£Â∏∏' : '‚ùå ÂºÇÂ∏∏');
    
    const workingEndpoints = Object.values(results.endpoints).filter(v => v).length;
    console.log(`Á´ØÁÇπÁä∂ÊÄÅ: ${workingEndpoints}/${endpoints.length} Ê≠£Â∏∏`);

    if (results.suggestions.length > 0) {
      console.log('\nüí° Âª∫ËÆÆËß£ÂÜ≥ÊñπÊ°à:');
      results.suggestions.forEach((suggestion, index) => {
        console.log(`${index + 1}. ${suggestion}`);
      });
    }

    return results;
  }

  /**
   * ÂàõÂª∫ÊµãËØïÂ∑•‰ΩúÊµÅ
   */
  createTestWorkflow() {
    return {
      "3": {
        "inputs": {
          "seed": 123456,
          "steps": 20,
          "cfg": 8,
          "sampler_name": "euler",
          "scheduler": "normal",
          "denoise": 1,
          "model": ["4", 0],
          "positive": ["6", 0],
          "negative": ["7", 0],
          "latent_image": ["5", 0]
        },
        "class_type": "KSampler"
      },
      "4": {
        "inputs": {
          "ckpt_name": "model.safetensors"
        },
        "class_type": "CheckpointLoaderSimple"
      },
      "5": {
        "inputs": {
          "width": 512,
          "height": 512,
          "batch_size": 1
        },
        "class_type": "EmptyLatentImage"
      },
      "6": {
        "inputs": {
          "text": "test prompt",
          "clip": ["4", 1]
        },
        "class_type": "CLIPTextEncode"
      },
      "7": {
        "inputs": {
          "text": "",
          "clip": ["4", 1]
        },
        "class_type": "CLIPTextEncode"
      },
      "8": {
        "inputs": {
          "samples": ["3", 0],
          "vae": ["4", 2]
        },
        "class_type": "VAEDecode"
      },
      "9": {
        "inputs": {
          "filename_prefix": "test",
          "images": ["8", 0]
        },
        "class_type": "SaveImage"
      }
    };
  }

  /**
   * Âø´ÈÄüÂÅ•Â∫∑Ê£ÄÊü•
   */
  async quickHealthCheck() {
    try {
      const response = await axios.get(`${this.comfyuiUrl}/queue`, { timeout: 3000 });
      return response.status === 200;
    } catch (error) {
      return false;
    }
  }
}

module.exports = ComfyUIDebugger;